import React, { useEffect, useMemo, useRef, useState } from 'react';
import { raidsApi, type RaidsSummary, type RaidTarget, type RaidLogItem } from '../shared/raidsApi';
import BottomNav from "../components/BottomNav";

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–π–¥–æ–≤:
 * - –≥—Ä—É–∑–∏—Ç —Å—Ç–∞—Ç—É—Å/—Ü–µ–ª–∏/–ª–æ–≥–∏
 * - –¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ò—Å—Ç–æ—Ä–∏—è, –ò—â–µ–º –∂–µ—Ä—Ç–≤—É, –£–ª—É—á—à–µ–Ω–∏—è)
 * - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ü–µ–ª—å
 * - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –±–æ—è + –ª–µ—Ç—è—â–∏–µ –º–æ–Ω–µ—Ç–∫–∏
 * - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –∞—Ç–∞–∫ (–ö–î)
 */

export default function RaidsPage() {
    // --- –±–∞–∑–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    const [loading, setLoading] = useState(false);       // –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    const [error, setError] = useState<string | null>(null);
    const [data, setData] = useState<RaidsSummary | null>(null);
    const [attackingId, setAttackingId] = useState<string | null>(null);
    const [refreshing, setRefreshing] = useState(false); // —Ç–∏—Ö–∏–π —Ä–µ—Ñ—Ä–µ—à –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏

    // --- –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏—Ä–æ—Å—Ç–∞ "–ú–æ–π —Å–∫–ª–∞–¥" ---
    const [deltaWarehouse, setDeltaWarehouse] = useState<number | null>(null);
    const deltaTimer = useRef<number | null>(null);

    // --- –º–∏–Ω–∏-–∞–Ω–∏–º–∞—Ü–∏—è –±–æ—è (–≤—Å–ø—ã—à–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ + "+N") ---
    const [battleFor, setBattleFor] = useState<string | null>(null);    // tgId —Ü–µ–ª–∏
    const [battleGain, setBattleGain] = useState<number | null>(null);  // —Å–∫–æ–ª—å–∫–æ —É–∫—Ä–∞–ª–∏

    // --- –õ–ï–¢–Ø–©–ò–ï –ú–û–ù–ï–¢–ö–ò ---
    // –∫—É–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞—é—Ç (DOM-—ç–ª–µ–º–µ–Ω—Ç "–ú–æ–π —Å–∫–ª–∞–¥")
    const myWarehouseRef = useRef<HTMLDivElement | null>(null);
    // –æ—Ç–∫—É–¥–∞ —Å—Ç–∞—Ä—Ç—É—é—Ç (–∫–∞—Ä—Ç–æ—á–∫–∏ —Ü–µ–ª–µ–π –ø–æ tgId)
    const targetRefs = useRef<Record<string, HTMLLIElement | null>>({});
    // –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥)
    const [fxList, setFxList] = useState<Array<{ id: string; startId: string; count: number }>>([]);

    // --- –º–æ–¥–∞–ª–∫–∏ ---
    const [logsOpen, setLogsOpen] = useState(false);       // –ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤
    const [targetsOpen, setTargetsOpen] = useState(false); // –ò—â–µ–º –∂–µ—Ä—Ç–≤—É
    const [targetsQuery, setTargetsQuery] = useState('');  // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–≥—É

    // --- –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã –ø–æ —Ü–µ–ª—è–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ---
    const [cooldowns, setCooldowns] = useState<Record<string, number>>({});
    useEffect(() => {
        const id = window.setInterval(() => {
            setCooldowns(prev => {
                let changed = false;
                const next: Record<string, number> = {};
                for (const k in prev) {
                    const v = Math.max(0, (prev[k] ?? 0) - 1);
                    next[k] = v;
                    if (v !== prev[k]) changed = true;
                }
                return changed ? next : prev;
            });
        }, 1000);
        return () => window.clearInterval(id);
    }, []);

    // ===== –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ =====
    useEffect(() => {
        let alive = true;
        (async () => {
            try {
                setLoading(true);
                setError(null);
                const s = await raidsApi.summary();
                if (!alive) return;
                setData(s);
            } catch (e: any) {
                const msg = e?.response?.data
                    ? (typeof e.response.data === 'string' ? e.response.data : JSON.stringify(e.response.data))
                    : e?.message ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π–¥—ã';
                setError(msg);
                setData(null);
            } finally {
                if (alive) setLoading(false);
            }
        })();
        return () => { alive = false; };
    }, []);

    // ===== –ß–∏—Ç–∞–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ =====
    const energyLine = useMemo(() => {
        if (!data) return '';
        const regen = data.energyRegenAt ? ` ‚Ä¢ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatTime(data.energyRegenAt)}` : '';
        return `–≠–Ω–µ—Ä–≥–∏—è: ${data.energy}/${data.energyMax}${regen}`;
    }, [data]);

    // ===== –¢–ï–ö–£–©–ò–ô –°–ö–õ–ê–î =====
    const myWarehouse = data?.myWarehouse ?? 0;

    // ====== RENDER ======
       return (
           <div className="app-page">
            <h2 style={{ margin: '8px 0 12px', fontSize: 20, fontWeight: 800 }}>–†–µ–π–¥—ã</h2>

            {/* –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π */}
            <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap', marginBottom: 10 }}>
                <button className="btn btn-outline btn-sm" onClick={() => setLogsOpen(true)}>
                    üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤
                </button>
                <button className="btn btn-primary btn-sm" onClick={() => setTargetsOpen(true)}>
                    üéØ –ò—â–µ–º –∂–µ—Ä—Ç–≤—É
                </button>
                <button className="btn btn-outline btn-sm" onClick={() => alert('–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º üôÇ')}>
                    üõ†Ô∏è –£–ª—É—á—à–µ–Ω–∏—è
                </button>
            </div>

            {/* –®–∞–ø–∫–∞: —ç–Ω–µ—Ä–≥–∏—è –∏ –º–æ–π —Å–∫–ª–∞–¥ */}
            <div style={{ display: 'grid', gap: 8, gridTemplateColumns: '1fr', marginBottom: 12 }}>
                <div className="stat-card">
                    <div className="stat-title">–≠–Ω–µ—Ä–≥–∏—è {refreshing ? '(–æ–±–Ω–æ–≤–ª—è–µ–º‚Ä¶)' : ''}</div>
                    <div className="stat-value">{energyLine}</div>
                </div>

                <div className="stat-card">
                    <div className="stat-title">–ú–æ–π —Å–∫–ª–∞–¥</div>
                    <div
                        ref={myWarehouseRef}
                        className={`stat-value ${deltaWarehouse ? 'pulse-green' : ''}`}
                        data-delta={deltaWarehouse ? `+${deltaWarehouse}` : ''}
                    >
                        {myWarehouse}
                    </div>
                </div>
            </div>

            {/* –û—à–∏–±–∫–∏/—Å–∫–µ–ª–µ—Ç */}
            {loading && <SkeletonList count={3} />}
            {error && <div style={{ color: '#ff6b6b', marginBottom: 8 }}>{error}</div>}

            {/* === –ú–æ–¥–∞–ª–∫–∏ === */}
            {logsOpen && data && (
                <>
                    <div className="modal-backdrop" onClick={() => setLogsOpen(false)} />
                    <div className="modal-card" role="dialog" aria-modal="true" aria-label="–ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤">
                        <div className="modal-head">–ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤</div>
                        <div className="modal-body">
                            {data.logs.length === 0 && <div className="row">–õ–æ–≥ –ø—É—Å—Ç.</div>}
                            {data.logs.length > 0 && data.logs.map((log) => (
                                <div key={log.id} className="row" style={{ alignItems: 'flex-start' }}>
                                    <div style={{ minWidth: 0 }}>
                                        <div className="row-title">{(log as any).targetName ?? (log as any).targetTag ?? '-'}</div>
                                        <div className="row-meta">
                                            {formatTime(log.createdAt)} ‚Ä¢ {log.amount >= 0 ? `—É–∫—Ä–∞–ª–∏ ${log.amount}` : `–ø–æ—Ç–µ—Ä—è–ª–∏ ${Math.abs(log.amount)}`}
                                        </div>
                                    </div>
                                    <div style={{ fontWeight: 800, color: log.amount >= 0 ? '#35d072' : '#ff6b6b' }}>
                                        {log.amount >= 0 ? 'WIN' : 'LOSE'}
                                    </div>
                                </div>
                            ))}
                        </div>
                        <div className="modal-foot">
                            <button className="btn btn-outline btn-sm modal-close" onClick={() => setLogsOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    </div>
                </>
            )}

            {targetsOpen && data && (
                <>
                    <div className="modal-backdrop" onClick={() => setTargetsOpen(false)} />
                    <div className="modal-card" role="dialog" aria-modal="true" aria-label="–ü–æ–∏—Å–∫ —Ü–µ–ª–∏">
                        <div className="modal-head">–ò—â–µ–º –∂–µ—Ä—Ç–≤—É</div>
                        <div className="modal-body">
                            <div style={{ marginBottom: 10 }}>
                                <input
                                    className="input"
                                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–≥—É‚Ä¶"
                                    value={targetsQuery}
                                    onChange={(e) => setTargetsQuery(e.target.value)}
                                />
                            </div>
                            {data.targets
                                .filter(t => {
                                    const q = targetsQuery.trim().toLowerCase();
                                    if (!q) return true;
                                    return (t.tag ?? '').toLowerCase().includes(q) || String(t.tgId ?? '').includes(q);
                                })
                                .map((t, i) => {
                                    const name = t.tag?.trim() || (t.tgId ? `–ò–≥—Ä–æ–∫ ${shortId(t.tgId)}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫');
                                    const cd = t.tgId ? cooldowns[t.tgId] ?? 0 : 0;
                                    const disabled = !t.tgId || !t.canAttack || (data.energy <= 0) || cd > 0;
                                    return (
                                        <div key={t.tgId || i} className="row">
                                            <div style={{ minWidth: 0 }}>
                                                <div className="row-title" title={String(t.tgId)}>{name}</div>
                                                <div className="row-meta">
                                                    –°–∫–ª–∞–¥: <b>{t.warehouse ?? t.buffer ?? 0}</b> ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: <b>{t.ratePerHour}/—á</b>
                                                    {t.isShielded && t.shieldUntil ? ` ‚Ä¢ –©–∏—Ç –¥–æ ${formatTime(t.shieldUntil)}` : ''}
                                                </div>
                                            </div>
                                            <button
                                                className="btn btn-primary btn-sm"
                                                disabled={disabled}
                                                onClick={async () => {
                                                    await onAttack(t);
                                                    setTargetsOpen(false);
                                                }}
                                                title={cd > 0 ? `–ö—É–ª–¥–∞—É–Ω: ${cd}s` : undefined}
                                            >
                                                {cd > 0 ? `–ö–î ${cd}s` : '–ê—Ç–∞–∫–æ–≤–∞—Ç—å'}
                                            </button>
                                        </div>
                                    );
                                })}
                            {data.targets.length === 0 && <div className="row">–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ü–µ–ª–µ–π.</div>}
                        </div>
                        <div className="modal-foot">
                            <button
                                className="btn btn-outline btn-sm"
                                onClick={async () => {
                                    try {
                                        setRefreshing(true);
                                        const s = await raidsApi.summary();
                                        setData(s);
                                    } finally {
                                        setRefreshing(false);
                                    }
                                }}
                            >
                                –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
                            </button>
                            <button className="btn btn-outline btn-sm modal-close" onClick={() => setTargetsOpen(false)}>
                                –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                </>
            )}

            {/* FX-—Å–ª–æ–π: –ª–µ—Ç—è—â–∏–µ –º–æ–Ω–µ—Ç–∫–∏ */}
            <div className="fx-layer">
                {fxList.map((fx) => (
                    <CoinFlight
                        key={fx.id}
                        startEl={fx.startId ? targetRefs.current[fx.startId] : null}
                        endEl={myWarehouseRef.current}
                        count={fx.count}
                        onDone={() => setFxList((prev) => prev.filter((x) => x.id !== fx.id))}
                    />
                ))}
               </div>
               <BottomNav />
        </div>
    );


    // ====== –õ–û–ì–ò–ö–ê –ê–¢–ê–ö–ò ======
    async function onAttack(t: RaidTarget) {
        if (!t.tgId) { setError('–£ —Ü–µ–ª–∏ –Ω–µ—Ç tgId –¥–ª—è –∞—Ç–∞–∫–∏'); return; }

        try {
            setAttackingId(t.tgId);
            setError(null);

            // 1) —à–ª—ë–º –∞—Ç–∞–∫—É
            const res = await raidsApi.attack(t.tgId);

            // 2) —Å–∫–æ–ª—å–∫–æ —É–∫—Ä–∞–ª–∏
            const stolen = Number(res.stolen ?? 0);

            // 3) –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—ë—Ç –º–æ–Ω–µ—Ç–æ–∫ (6‚Äì12 —à—Ç—É–∫)
            if (stolen > 0 && t.tgId) {
                const count = Math.max(6, Math.min(12, Math.round(stolen / 1000)));
                setFxList((prev) => [...prev, { id: `${t.tgId}-${Date.now()}`, startId: t.tgId!, count }]);
            }

            // 4) –≤—Å–ø—ã—à–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ + "+N"
            setBattleFor(t.tgId);
            setBattleGain(stolen);
            if (stolen > 0) flashWarehouseDelta(stolen);
            window.setTimeout(() => {
                setBattleFor(null);
                setBattleGain(null);
            }, 1000);

            // 5) —Ç–∏—Ö–∏–π —Ä–µ—Ñ—Ä–µ—à —Å–≤–æ–¥–∫–∏ (—ç–Ω–µ—Ä–≥–∏—è/—Ü–µ–ª–∏/–ª–æ–≥–∏/–º–æ–π —Å–∫–ª–∞–¥)
            setRefreshing(true);
            const s = await raidsApi.summary();
            setData(s);
            setRefreshing(false);
        } catch (e: any) {
            const raw =
                e?.response?.data?.message ??
                e?.response?.data?.error ??
                e?.message ??
                String(e);

            // –∫—É–ª–¥–∞—É–Ω ‚Äî —Å—Ç–∞–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            if (raw && /cooldown/i.test(raw)) {
                const sec =
                    /(\d+)\s*sec|\b(\d+)\s*s/i.test(raw) ? Number((raw.match(/(\d+)\s*sec|\b(\d+)\s*s/i) || [, '', ''])[1] || (raw.match(/(\d+)\s*sec|\b(\d+)\s*s/i) || [, '', ''])[2]) :
                        /(\d+)\s*min/i.test(raw) ? (Number((raw.match(/(\d+)\s*min/i) || ['', ''])[1]) * 60) :
                            60;

                if (t.tgId) {
                    setCooldowns(prev => ({ ...prev, [t.tgId!]: Math.max(1, sec) }));
                }
                setError(`–ö—É–ª–¥–∞—É–Ω —Ä–µ–π–¥–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${Math.max(1, sec)} —Å–µ–∫.`);
                return;
            }

            setError(typeof raw === 'string' ? raw : '–û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏');
        } finally {
            setAttackingId(null);
        }
    }

    // ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ======
    function flashWarehouseDelta(amount: number) {
        if (amount <= 0) return;
        setDeltaWarehouse(amount);
        if (deltaTimer.current) window.clearTimeout(deltaTimer.current);
        deltaTimer.current = window.setTimeout(() => {
            setDeltaWarehouse(null);
            deltaTimer.current = null;
        }, 900);
    }
}

// --- —É—Ç–∏–ª–∏—Ç—ã –∏ —Å–∫–µ–ª–µ—Ç–æ–Ω ---
function formatTime(iso?: string | null) {
    if (!iso) return '';
    const d = new Date(iso);
    return isNaN(d.getTime()) ? '' : `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;
}

function shortId(id?: string | null) {
    const s = String(id ?? '');
    if (!s) return '????';
    return s.length <= 8 ? s : `${s.slice(0, 4)}‚Ä¶${s.slice(-4)}`;
}

function SkeletonList({ count = 3 }: { count?: number }) {
    return (
        <div style={{ display: 'grid', gap: 8 }}>
            {Array.from({ length: count }).map((_, i) => (
                <div key={i} className="skel-item">
                    <div className="skel-bar" style={{ width: '55%' }}></div>
                    <div className="skel-bar" style={{ width: '35%' }}></div>
                    <div className="skel-bar" style={{ width: '70%' }}></div>
                </div>
            ))}
        </div>
    );
}

/** ===== –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ª–µ—Ç—è—â–∏—Ö –º–æ–Ω–µ—Ç–æ–∫ =====
 * –°—Ç—Ä–æ–∏—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ü–µ–ª–∏ –≤ –±–ª–æ–∫ "–ú–æ–π —Å–∫–ª–∞–¥" –∏ –∞–Ω–∏–º–∏—Ä—É–µ—Ç –∏—Ö.
 */
function CoinFlight({
    startEl, endEl, count = 8, onDone,
}: {
    startEl: HTMLElement | null;
    endEl: HTMLElement | null;
    count?: number;
    onDone?: () => void;
}) {
    const layerRef = useRef<HTMLDivElement | null>(null);
    const baseIdRef = useRef(`fx${Math.random().toString(36).slice(2)}`); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è id
    const [renderCoins, setRenderCoins] = useState<Array<{ id: number; x: number; y: number }>>([]);

    useEffect(() => {
        if (!startEl || !endEl) { onDone?.(); return; }

        // —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî –±–ª–∏–∂–∞–π—à–∏–π .fx-layer
        const layer = layerRef.current?.parentElement as HTMLElement | null;
        const rectLayer = layer?.getBoundingClientRect();
        const rectStart = startEl.getBoundingClientRect();
        const rectEnd = endEl.getBoundingClientRect();
        if (!rectLayer) { onDone?.(); return; }

        // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞/—Ñ–∏–Ω–∏—à–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ—è
        const sx = (rectStart.left + rectStart.width * 0.85) - rectLayer.left;
        const sy = (rectStart.top + rectStart.height * 0.2) - rectLayer.top;
        const ex = (rectEnd.left + rectEnd.width * 0.5) - rectLayer.left;
        const ey = (rectEnd.top + rectEnd.height * 0.5) - rectLayer.top;

        const N = Math.max(1, Math.min(24, count | 0));
        // –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–ù–ï –∏–∑ useState)
        const localCoins = Array.from({ length: N }).map((_, i) => ({
            id: i,
            x0: sx + (Math.random() * 20 - 10),
            y0: sy + (Math.random() * 12 - 6),
            delay: Math.min(0.15, i * 0.02),
            rotSign: i % 2 === 0 ? 1 : -1,
        }));
        // –æ—Ç—Ä–∏—Å—É–µ–º ¬´–∑–∞–≥–ª—É—à–∫–∏¬ª –¥–ª—è DOM (—á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã)
        setRenderCoins(localCoins.map(c => ({ id: c.id, x: c.x0, y: c.y0 })));

        // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ
        const cx = (sx + ex) / 2 + (Math.random() * 60 - 30);
        const cy = Math.min(sy, ey) - 80 - Math.random() * 40;

        let raf = 0;
        const started = performance.now();
        const D = 820;

        const easeInOutCubic = (t: number) =>
            t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;

        const baseId = baseIdRef.current;

        function frame(now: number) {
            const t = Math.min(1, (now - started) / D);

            for (let idx = 0; idx < localCoins.length; idx++) {
                const c = localCoins[idx];
                const tp = Math.max(0, Math.min(1, (t - c.delay) / (1 - c.delay || 1)));
                const tt = easeInOutCubic(tp);

                const x = (1 - tt) * (1 - tt) * c.x0 + 2 * (1 - tt) * tt * cx + tt * tt * ex;
                const y = (1 - tt) * (1 - tt) * c.y0 + 2 * (1 - tt) * tt * cy + tt * tt * ey;

                const node = document.getElementById(`${baseId}-${c.id}`);
                if (node) {
                    const rot = c.rotSign * (15 + idx * 3) * tt;
                    const op = 1 - Math.max(0, tt - 0.8) / 0.2;
                    (node as HTMLElement).style.transform = `translate3d(${x}px, ${y}px, 0) rotate(${rot}deg)`;
                    (node as HTMLElement).style.opacity = `${op}`;
                }
            }

            if (t < 1) {
                raf = requestAnimationFrame(frame);
            } else {
                setTimeout(() => onDone?.(), 80);
            }
        }

        raf = requestAnimationFrame(frame);
        return () => cancelAnimationFrame(raf);
    }, [startEl, endEl, count, onDone]);

    const baseId = baseIdRef.current;

    return (
        <div ref={layerRef}>
            {renderCoins.map((c) => (
                <span
                    key={c.id}
                    id={`${baseId}-${c.id}`}          // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
                    className="fx-coin"
                    style={{ transform: `translate3d(${c.x}px, ${c.y}px, 0)` }}
                />
            ))}
        </div>
    );
}
